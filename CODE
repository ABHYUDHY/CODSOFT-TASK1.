def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_win(board, player):
    for i in range(3):
        if all([board[i][j] == player for j in range(3)]) or all([board[j][i] == player for j in range(3)]):
            return True
    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):
        return True
    return False

def check_draw(board):
    return all([board[i][j] != ' ' for i in range(3) for j in range(3)])

def minimax(board, depth, is_maximizing, alpha, beta):
    if check_win(board, 'O'):
        return 1
    if check_win(board, 'X'):
        return -1
    if check_draw(board):
        return 0
    
    if is_maximizing:
        max_eval = -float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    eval = minimax(board, depth + 1, False, alpha, beta)
                    board[i][j] = ' '
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    eval = minimax(board, depth + 1, True, alpha, beta)
                    board[i][j] = ' '
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

def best_move(board):
    best_val = -float('inf')
    move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'
                move_val = minimax(board, 0, False, -float('inf'), float('inf'))
                board[i][j] = ' '
                if move_val > best_val:
                    move = (i, j)
                    best_val = move_val
    return move

def get_human_move(board):
    while True:
        try:
            row, col = map(int, input("Enter your move (row and column: 0, 1, or 2): ").split())
            if board[row][col] == ' ':
                return row, col
            else:
                print("This position is already taken. Try again.")
        except (ValueError, IndexError):
            print("Invalid input. Enter row and column numbers (0, 1, or 2).")

def main():
    while True:
        board = [[' ' for _ in range(3)] for _ in range(3)]
        player_symbol = input("Choose your symbol (X or O): ").upper()
        while player_symbol not in ['X', 'O']:
            player_symbol = input("Invalid choice. Choose your symbol (X or O): ").upper()
        ai_symbol = 'O' if player_symbol == 'X' else 'X'
        print("You are '{}'. AI is '{}'.".format(player_symbol, ai_symbol))
        
        turn = 'X'
        while True:
            print_board(board)
            if turn == player_symbol:
                print("Your move!")
                row, col = get_human_move(board)
                board[row][col] = player_symbol
                if check_win(board, player_symbol):
                    print_board(board)
                    print("Congratulations, you win!")
                    break
                if check_draw(board):
                    print_board(board)
                    print("It's a draw!")
                    break
                turn = ai_symbol
            else:
                print("AI's move!")
                row, col = best_move(board)
                board[row][col] = ai_symbol
                if check_win(board, ai_symbol):
                    print_board(board)
                    print("AI wins!")
                    break
                if check_draw(board):
                    print_board(board)
                    print("It's a draw!")
                    break
                turn = player_symbol
        
        play_again = input("Do you want to play again? (yes or no): ").lower()
        if play_again != 'yes':
            break

if __name__ == "__main__":
    main()
